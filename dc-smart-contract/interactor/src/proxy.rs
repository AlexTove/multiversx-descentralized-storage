// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct DcscProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for DcscProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = DcscProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        DcscProxyMethods { wrapped_tx: tx }
    }
}

pub struct DcscProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> DcscProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> DcscProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> DcscProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn files(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, MultiValue2<ManagedAddress<Env::Api>, ManagedVec<Env::Api, FileMetadata<Env::Api>>>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("files")
            .original_result()
    }

    pub fn user_files<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, FileMetadata<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("userFiles")
            .argument(&user_address)
            .original_result()
    }

    pub fn upload_file<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg4: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        file_hash: Arg0,
        file_size: Arg1,
        file_name: Arg2,
        file_type: Arg3,
        file_cid: Arg4,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("uploadFile")
            .argument(&file_hash)
            .argument(&file_size)
            .argument(&file_name)
            .argument(&file_type)
            .argument(&file_cid)
            .original_result()
    }

    pub fn remove_file<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        file_cid: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeFile")
            .argument(&file_cid)
            .original_result()
    }

    pub fn get_uploaded_files(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, FileMetadata<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUploadedFiles")
            .original_result()
    }

    pub fn add_tag<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        file_cid: Arg0,
        tag: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addTag")
            .argument(&file_cid)
            .argument(&tag)
            .original_result()
    }

    pub fn remove_tag<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        file_cid: Arg0,
        tag: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeTag")
            .argument(&file_cid)
            .argument(&tag)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq, ManagedVecItem, Clone, Debug)]
pub struct FileMetadata<Api>
where
    Api: ManagedTypeApi,
{
    pub file_hash: ManagedBuffer<Api>,
    pub file_size: u64,
    pub file_name: ManagedBuffer<Api>,
    pub file_type: ManagedBuffer<Api>,
    pub file_tags: ManagedVec<Api, ManagedBuffer<Api>>,
    pub file_cid: ManagedBuffer<Api>,
    pub timestamp: u64,
    pub uploader: ManagedAddress<Api>,
}
